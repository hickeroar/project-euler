"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import math

def getDivisorCount(number):
    divisors = 0
    squareRoot = math.sqrt(number)

    for divisor in xrange(1, int(squareRoot)):
        if number%divisor==0:
            divisors += 2
            """
            Explanation:
                n = 28 has the divisors: 1,2,4,7,14,28
                    sqrt(28) = 5.29...
                if divisor is 4, 28 % 4 = 0.
                    28 / 4 = 7
                also, if divisor is 2, 28 % 2 = 0.
                    28 / 2 = 14
                And so on...
            Therefore, we add two counts since we're going from 1 to sqrt of number
            """

    # If sqrt of the number is a whole number, we subtract 1,
    # because we just counted it twice in the above loop
    if squareRoot==int(squareRoot):
        divisors -= 1

    return divisors

triangleSize = 0
triangleNumber = 0
divisorCount = 0

while divisorCount <= 500:

    triangleSize += 1
    triangleNumber += triangleSize
    divisorCount = getDivisorCount(triangleNumber)

print triangleNumber